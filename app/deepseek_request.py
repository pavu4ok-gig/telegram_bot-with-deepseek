from openai import OpenAI
from openai import RateLimitError
import time
import logging
from app.config import LLM_ENDPOINT, LLM_API_KEY, LLM_MODEL

logger = logging.getLogger(__name__)

class SendRequestToLLM:
    
    def __init__(self):
        self.client = OpenAI(
            base_url=LLM_ENDPOINT,
            api_key=LLM_API_KEY,
            timeout=30  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        )
        self.last_request_time = 0
        self.min_interval = 2  # –ú–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    def get_answer(self, promt):
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        if time_since_last < self.min_interval:
            sleep_time = self.min_interval - time_since_last
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º")
            time.sleep(sleep_time)
        
        logger.info('üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ DeepSeek')
        self.last_request_time = time.time()
        
        for attempt in range(3):  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫
            try:
                completion = self.client.chat.completions.create(
                    model=LLM_MODEL,
                    messages=[
                        {
                            "role": "user",
                            "content": f"–¢—ã —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞: {promt}"
                        }
                    ],
                    max_tokens=150,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                    temperature=0.7
                )
                
                logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek')
                return completion.choices[0].message.content
                
            except RateLimitError as e:
                wait_time = min(10 * (2 ** attempt), 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫
                logger.warning(f"‚ö†Ô∏è Rate limit (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3). –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫...")
                if attempt < 2:  # –ù–µ –∂–¥–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
                    time.sleep(wait_time)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {e}")
                if attempt == 2:
                    return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                time.sleep(2)
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
