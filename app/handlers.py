from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from app.request_queue import request_queue
import logging

logging.basicConfig(level=logging.INFO)
router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('ü§ñ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤')

@router.message()
async def handle_text(message: Message):
    print(f"–ü–û–õ–£–ß–ï–ù–û: {message.text}")
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.from_user.id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –≤–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async def send_response(response_text):
        await message.answer(response_text)
    
    await request_queue.add_request(
        user_id=message.from_user.id,
        message_text=message.text,
        response_callback=send_response
    )
    
    # –°—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    queue_size = len(request_queue.queue)
    if queue_size > 0:
        await message.answer(f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥–∏ (–ø–æ–∑–∏—Ü–∏—è: {queue_size})")
